{
  "version": 3,
  "sources": ["../../../../node_modules/@theojs/lumen/types/index.ts", "../../../../node_modules/@theojs/lumen/types/utils.ts"],
  "sourcesContent": ["export { default as DocBox } from '../components/DocBox.vue'\nexport { default as DocLinks } from '../components/DocLinks.vue'\nexport { default as DocBoxCube } from '../components/DocBoxCube.vue'\nexport { default as DocVideoLink } from '../components/DocVideoLink.vue'\nexport { default as Announcement } from '../components/Announcement.vue'\nexport { default as DocAsideLogo } from '../components/DocAsideLogo.vue'\nexport { default as HomeFooter } from '../components/HomeFooter.vue'\nexport { default as HomeUnderline } from '../components/HomeUnderline.vue'\nexport { default as Twikoo } from '../components/DocTwikoo.vue'\nexport { default as ShareButton } from '../components/ShareButton.vue'\n\nexport * from './types'\nexport * from './utils'\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'\n", "import { computed, nextTick, ref, onMounted, onUnmounted } from 'vue'\nimport { useData } from 'vitepress'\nimport { Prelink } from './types'\n\n/**\n * 从 `frontmatter` 获取 `prelink`。\n *\n * @returns {Prelink | undefined} 返回 `frontmatter` 中 `hero` 对象的 `prelink` 属性值，如果不存在则为 `undefined`。\n */\nexport const usePrelink = (): Prelink | undefined => {\n  const { frontmatter } = useData()\n  return computed(() => frontmatter.value.hero?.prelink).value\n}\n\n/**\n * 判断给定的 URL 是否为图像文件。\n *\n * @param {string} url - 要判断的 URL。\n * @returns {boolean} - 如果 URL 是图像文件，则返回 `true`，否则返回 `false`。\n *\n * 该函数首先检查 URL 是否以 `http` 或 `https` 开头，并且是否包含有效的图像文件后缀（如 png, jpeg, gif 等）。\n * 如果 URL 没有后缀，但以 `http` 或 `https` 开头，则也视为有效的图像链接。\n */\nexport const isImage = (url: string): boolean => {\n  // 检查 URL 是否包含合法的图像文件后缀\n  const hasValidExtension = /\\.(png|jpe?g|gif|svg|webp|bmp|tif?f|tiff|ico|avif)(\\?.*)?$/i.test(url)\n  // 检查 URL 是否以 http 或 https 开头\n  const isHttpOrHttps = /^https?:\\/\\//i.test(url)\n\n  // 如果包含有效后缀，或没有后缀但以 http 或 https 开头，则返回 true\n  return hasValidExtension || (isHttpOrHttps && !/\\.(\\w+)$/.test(url))\n}\n\n/**\n * 判断给定的链接是否是外部链接。\n *\n * @param {string} link - 要判断的链接。\n * @returns {boolean} - 如果链接是外部链接，则返回 `true`，否则返回 `false`。\n */\nexport const isExternalLink = (link: string): boolean => /^https?:\\/\\//.test(link)\n\n/**\n * 初始化 Twikoo 评论系统。\n *\n * 异步函数，动态导入 Twikoo 并进行初始化。\n *\n * @param {string} envId - Twikoo 的环境 ID。\n * @returns {Promise<void>} - 无返回值的 Promise。\n */\nexport async function initTwikoo(envId: string): Promise<void> {\n  try {\n    const twikoo = await import('twikoo')\n    console.log('Twikoo 加载成功')\n    if (typeof window !== 'undefined') {\n      // 确保 DOM 元素存在后再进行初始化\n      await nextTick() // 等待 DOM 更新\n      const twikooElement = document.querySelector('#twikoo')\n      if (twikooElement) {\n        twikoo.init({\n          envId,\n          el: '#twikoo'\n        })\n      } else {\n        console.error('未找到 Twikoo 元素。')\n      }\n    }\n  } catch (error) {\n    console.error('初始化 Twikoo 失败：', error)\n  }\n}\n\n/**\n * 创建一个视频播放状态的 ref 和切换函数。\n *\n * @returns { [Ref<boolean>, () => void] } 返回视频播放状态和切换函数。\n */\nexport const useVideoToggle = () => {\n  const isVideoOpen = ref(false)\n\n  const toggleVideo = () => {\n    isVideoOpen.value = !isVideoOpen.value\n  }\n\n  return [isVideoOpen, toggleVideo] as const\n}\n\n/**\n * 自定义钩子，管理窗口宽度和更新逻辑。\n *\n * @returns { [Ref<number | null>, () => void] } 返回窗口宽度和更新函数。\n */\nexport const useWindowWidth = () => {\n  const windowWidth = ref<number | null>(null)\n\n  const updateWindowWidth = () => {\n    windowWidth.value = window.innerWidth\n  }\n\n  // 组件挂载时添加 resize 事件监听器\n  onMounted(() => {\n    if (typeof window !== 'undefined') {\n      windowWidth.value = window.innerWidth\n      window.addEventListener('resize', updateWindowWidth)\n    }\n  })\n\n  // 组件卸载时移除 resize 事件监听器\n  onUnmounted(() => {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('resize', updateWindowWidth)\n    }\n  })\n\n  return windowWidth\n}\n\nexport function moveDomElements() {\n  onMounted(() => {\n    const targetElement = document.querySelector('.VPHero .text') as HTMLElement | null\n    const sourceElement = document.querySelector('#hero-text') as HTMLElement | null\n\n    if (targetElement && sourceElement) {\n      targetElement.innerHTML = ''\n      targetElement.appendChild(sourceElement)\n    }\n  })\n}\n\nexport const useCopyLink = () => {\n  const copied = ref(false)\n\n  const copyLink = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text)\n      copied.value = true\n      setTimeout(() => {\n        copied.value = false\n      }, 2000)\n    } catch (err) {\n      console.error('Failed to copy: ', err)\n      alert('复制链接失败，请手动复制。')\n    }\n  }\n\n  return { copied, copyLink } // 返回对象而不是数组\n}\n"],
  "mappings": ";;;;;;;;;;AAAA,SAAoB,WAAXA,gBAAyB;AAClC,SAAoB,WAAXA,gBAA2B;AACpC,SAAoB,WAAXA,gBAA6B;AACtC,SAAoB,WAAXA,gBAA+B;AACxC,SAAoB,WAAXA,gBAA+B;AACxC,SAAoB,WAAXA,gBAA+B;AACxC,SAAoB,WAAXA,gBAA6B;AACtC,SAAoB,WAAXA,gBAAgC;AACzC,SAAoB,WAAXA,iBAAyB;AAClC,SAAoB,WAAXA,iBAA8B;;;ACRvC,SAAS,eAAe;AAQjB,IAAM,aAAa,MAA2B;AACnD,QAAM,EAAE,YAAY,IAAI,QAAQ;AAChC,SAAO,SAAS,MAAG;AAXrB;AAWwB,6BAAY,MAAM,SAAlB,mBAAwB;AAAA,GAAO,EAAE;AACzD;AAWO,IAAM,UAAU,CAAC,QAAyB;AAE/C,QAAM,oBAAoB,8DAA8D,KAAK,GAAG;AAEhG,QAAM,gBAAgB,gBAAgB,KAAK,GAAG;AAG9C,SAAO,qBAAsB,iBAAiB,CAAC,WAAW,KAAK,GAAG;AACpE;AAQO,IAAM,iBAAiB,CAAC,SAA0B,eAAe,KAAK,IAAI;AAUjF,eAAsB,WAAW,OAA8B;AAC7D,MAAI;AACF,UAAM,SAAS,MAAM,OAAO,8BAAQ;AACpC,YAAQ,IAAI,aAAa;AACzB,QAAI,OAAO,WAAW,aAAa;AAEjC,YAAM,SAAS;AACf,YAAM,gBAAgB,SAAS,cAAc,SAAS;AACtD,UAAI,eAAe;AACjB,eAAO,KAAK;AAAA,UACV;AAAA,UACA,IAAI;AAAA,QACN,CAAC;AAAA,MACH,OAAO;AACL,gBAAQ,MAAM,gBAAgB;AAAA,MAChC;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,kBAAkB,KAAK;AAAA,EACvC;AACF;AAOO,IAAM,iBAAiB,MAAM;AAClC,QAAM,cAAc,IAAI,KAAK;AAE7B,QAAM,cAAc,MAAM;AACxB,gBAAY,QAAQ,CAAC,YAAY;AAAA,EACnC;AAEA,SAAO,CAAC,aAAa,WAAW;AAClC;AAOO,IAAM,iBAAiB,MAAM;AAClC,QAAM,cAAc,IAAmB,IAAI;AAE3C,QAAM,oBAAoB,MAAM;AAC9B,gBAAY,QAAQ,OAAO;AAAA,EAC7B;AAGA,YAAU,MAAM;AACd,QAAI,OAAO,WAAW,aAAa;AACjC,kBAAY,QAAQ,OAAO;AAC3B,aAAO,iBAAiB,UAAU,iBAAiB;AAAA,IACrD;AAAA,EACF,CAAC;AAGD,cAAY,MAAM;AAChB,QAAI,OAAO,WAAW,aAAa;AACjC,aAAO,oBAAoB,UAAU,iBAAiB;AAAA,IACxD;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEO,SAAS,kBAAkB;AAChC,YAAU,MAAM;AACd,UAAM,gBAAgB,SAAS,cAAc,eAAe;AAC5D,UAAM,gBAAgB,SAAS,cAAc,YAAY;AAEzD,QAAI,iBAAiB,eAAe;AAClC,oBAAc,YAAY;AAC1B,oBAAc,YAAY,aAAa;AAAA,IACzC;AAAA,EACF,CAAC;AACH;AAEO,IAAM,cAAc,MAAM;AAC/B,QAAM,SAAS,IAAI,KAAK;AAExB,QAAM,WAAW,OAAO,SAAiB;AACvC,QAAI;AACF,YAAM,UAAU,UAAU,UAAU,IAAI;AACxC,aAAO,QAAQ;AACf,iBAAW,MAAM;AACf,eAAO,QAAQ;AAAA,MACjB,GAAG,GAAI;AAAA,IACT,SAAS,KAAK;AACZ,cAAQ,MAAM,oBAAoB,GAAG;AACrC,YAAM,eAAe;AAAA,IACvB;AAAA,EACF;AAEA,SAAO,EAAE,QAAQ,SAAS;AAC5B;;;ADnIA,OAAO;",
  "names": ["default"]
}
