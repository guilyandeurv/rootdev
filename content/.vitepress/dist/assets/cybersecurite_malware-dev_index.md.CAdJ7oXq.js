import{_ as r,c as n,j as t,a as i,G as a,an as o,B as l,o as u}from"./chunks/framework.ys1W0Hiz.js";const d="/assets/vstudio.DIyOhjEL.png",p="/assets/x64dbg.DntWxkvf.png",c="/assets/PE-bear.DYcOkBke.png",m="/assets/ProcessHacker.Hvj6HyQ7.png",g="/assets/msfvenom.p8Z37Vzu.png",y=JSON.parse('{"title":"Introduction au Développement de Malware","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"cybersecurite/malware-dev/index.md","filePath":"cybersecurite/malware-dev/index.md","lastUpdated":1729429463000}'),v={name:"cybersecurite/malware-dev/index.md"};function h(f,e,b,q,x,P){const s=l("Badge");return u(),n("div",null,[e[0]||(e[0]=t("h1",{id:"introduction-au-developpement-de-malware",tabindex:"-1"},[i("Introduction au Développement de Malware "),t("a",{class:"header-anchor",href:"#introduction-au-developpement-de-malware","aria-label":'Permalink to "Introduction au Développement de Malware"'},"​")],-1)),a(s,{type:"tip",text:"Rédigé le 15/10/2024"}),a(s,{type:"warning",text:"En cours de rédaction"}),e[1]||(e[1]=o('<h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Le malware est un type de logiciel spécifiquement conçu pour effectuer des actions malveillantes telles que l&#39;accès non autorisé à une machine ou le vol de données sensibles. Le terme &quot;malware&quot; est souvent associé à des conduites illégales ou criminelles, mais il peut aussi être utilisé par des hackers éthiques tels que les testeurs d&#39;intrusion et les équipes rouges pour une évaluation de sécurité autorisée d&#39;une organisation.</p><p>Ce cours permet aux utilisateurs d&#39;utiliser les connaissances acquises à des fins éthiques et légales uniquement, toute autre utilisation peut entraîner des poursuites pénales dont RootDev n&#39;en sera pas responsable.</p><h2 id="pourquoi-developper-des-malware" tabindex="-1">Pourquoi développer des Malware ? <a class="header-anchor" href="#pourquoi-developper-des-malware" aria-label="Permalink to &quot;Pourquoi développer des Malware ?&quot;">​</a></h2><p>Il y a plusieurs raisons pour lesquelles quelqu&#39;un voudrait apprendre le développement de malware. D&#39;un point de vue de la sécurité offensive, les testeurs doivent souvent effectuer certaines tâches malveillantes contre l&#39;environnement d&#39;un client. Les testeurs ont généralement trois options principales en ce qui concerne les types d&#39;outils utilisés lors d&#39;un engagement :</p><ul><li><strong>Outils Open Source (OSTs)</strong> : Ces outils sont généralement détectés par les fournisseurs de sécurité et identifiés dans toute organisation décemment protégée ou mature. Ils ne sont pas toujours fiables lors d&#39;une évaluation de sécurité offensive.</li><li><strong>Achat d&#39;outils</strong> : Les équipes avec des budgets plus importants optent souvent pour l&#39;achat d&#39;outils afin de gagner du temps précieux pendant les engagements. Semblables aux outils personnalisés, ceux-ci sont généralement fermés et ont une meilleure chance d&#39;éviter les solutions de sécurité.</li><li><strong>Développement d&#39;outils personnalisés</strong> : Parce que ces outils sont construits sur mesure, ils n&#39;ont pas été analysés ou signés par les fournisseurs de sécurité, ce qui donne à l&#39;équipe attaquante un avantage en matière de détection. C&#39;est là que la connaissance du développement de malware devient primordiale pour une évaluation de sécurité offensive plus réussie.</li></ul><h2 id="quel-langage-de-programmation-utiliser" tabindex="-1">Quel langage de programmation utiliser ? <a class="header-anchor" href="#quel-langage-de-programmation-utiliser" aria-label="Permalink to &quot;Quel langage de programmation utiliser ?&quot;">​</a></h2><p>Techniquement, n&#39;importe quel langage de programmation peut être utilisé pour créer un malware, comme Python, PowerShell, C#, C, C++ et Go. Cela dit, il existe quelques raisons pour lesquelles certains langages de programmation prévalent sur d&#39;autres en matière de développement de malware, et cela se résume généralement aux points suivants :</p><ul><li>Certains langages de programmation sont plus difficiles à rétro-concevoir. Cela doit toujours faire partie de l&#39;objectif de l&#39;attaquant de s&#39;assurer que les défenseurs comprennent peu comment le malware se comporte.</li><li>Certains langages de programmation nécessitent des prérequis sur le système cible. Par exemple, exécuter un script Python nécessite la présence d&#39;un interprète sur la machine cible. Sans l&#39;interprète Python présent sur la machine, il est impossible d&#39;exécuter un malware basé sur Python.</li><li>Selon le langage de programmation, la taille du fichier généré peut varier.</li></ul><h3 id="langages-de-programmation-de-haut-niveau-vs-bas-niveau" tabindex="-1">Langages de Programmation de haut niveau vs bas niveau <a class="header-anchor" href="#langages-de-programmation-de-haut-niveau-vs-bas-niveau" aria-label="Permalink to &quot;Langages de Programmation de haut niveau vs bas niveau&quot;">​</a></h3><p>Les langages de programmation peuvent être classés en deux groupes différents : haut niveau et bas niveau.</p><ul><li><strong>Haut niveau</strong> : Généralement plus abstraits du système d&#39;exploitation, moins efficaces en mémoire et fournissent au développeur moins de contrôle global en raison de l&#39;abstraction de plusieurs fonctions complexes. Un exemple de langage de programmation de haut niveau est Python.</li><li><strong>Bas niveau</strong> : Permet d&#39;interagir avec le système d&#39;exploitation à un niveau intime et donne au développeur plus de liberté lors de l&#39;interaction avec le système. Un exemple de langage de programmation de bas niveau est C.</li></ul><p>Étant donné les explications précédentes, il devrait être clair pourquoi les langages de programmation de bas niveau ont été le choix préféré dans le développement de malware, en particulier lorsqu&#39;il s&#39;agit de cibler les machines Windows.</p><h2 id="cycle-de-vie-du-developpement-de-malware" tabindex="-1">Cycle de vie du développement de Malware <a class="header-anchor" href="#cycle-de-vie-du-developpement-de-malware" aria-label="Permalink to &quot;Cycle de vie du développement de Malware&quot;">​</a></h2><p>Fondamentalement, un malware est un logiciel conçu pour effectuer certaines actions. Les implémentations logicielles réussies nécessitent un processus connu sous le nom de <em>cycle de vie du développement logiciel (<em><strong>SDLC</strong></em>)</em>. De même, un malware bien construit et complexe nécessitera une version adaptée du SDLC appelée <em>cycle de vie du développement de malware (<em><strong>MDLC</strong></em>)</em>.</p><p>Bien que le MDLC ne soit pas nécessairement un processus formalisé, il comprend 5 étapes principales :</p><ol><li><strong>Développement</strong> : Commencer le développement ou l&#39;amélioration de la fonctionnalité du malware.</li><li><strong>Test</strong> : Effectuer des tests pour découvrir des bugs cachés dans le code développé jusqu&#39;à présent.</li><li><strong>Test AV/EDR hors ligne</strong> : Exécuter le malware développé contre autant de produits de sécurité que possible. Il est important que les tests soient effectués hors ligne pour s&#39;assurer qu&#39;aucun échantillon n&#39;est envoyé aux fournisseurs de sécurité. En utilisant Microsoft Defender, cela est réalisé en désactivant les soumissions d&#39;échantillons automatisées et l&#39;option de protection cloud.</li><li><strong>Test AV/EDR en ligne</strong> : Exécuter le malware développé contre les produits de sécurité avec connectivité Internet. Les moteurs cloud sont souvent des composants clés dans les AVs/EDRs et donc tester le malware contre ces composants est crucial pour obtenir des résultats plus précis. Il faut être prudent car cette étape peut entraîner l&#39;envoi d&#39;échantillons au moteur cloud de la solution de sécurité.</li><li><strong>Analyse des indicateurs de compromission (IoC)</strong> : À cette étape, il faut analyser le malware et extraire les IoCs qui peuvent potentiellement être utilisés pour détecter ou signer le malware.</li></ol><h2 id="outils-de-retro-ingenierie" tabindex="-1">Outils de rétro-ingénierie <a class="header-anchor" href="#outils-de-retro-ingenierie" aria-label="Permalink to &quot;Outils de rétro-ingénierie&quot;">​</a></h2><p>Plusieurs des outils mentionnés se concentrent davantage sur la rétro-ingénierie plutôt que sur le développement. Il est essentiel de rétro-ingénier le malware créé pour comprendre pleinement son fonctionnement interne et avoir une idée de ce que les analystes de malware verront lors de l&#39;inspection du malware.</p><div class="tip custom-block"><p class="custom-block-title">Définition</p><p>La rétro-ingénierie est une méthode qui tente d&#39;expliquer, par déduction et analyse systémique, comment un mécanisme, un dispositif, un système ou un programme existant, accomplit une tâche sans connaissance précise de la manière dont il fonctionne.</p></div><p>Outils à installer :</p><ul><li><strong>Visual Studio</strong> : C&#39;est l&#39;environnement de développement où se dérouleront le codage et la compilation. Installer le Runtime C/C++.</li><li><strong>x64dbg</strong> : x64dbg est un débogueur qui sera utilisé tout au long des modules pour obtenir une compréhension interne du malware développé.</li><li><strong>PE-Bear</strong> : PE-Bear est un outil de rétro-ingénierie multiplateforme pour les fichiers PE. Il sera également utilisé pour évaluer le malware développé et rechercher des indicateurs suspects.</li><li><strong>Process Hacker</strong> : Process Hacker est un outil puissant et polyvalent qui aide à surveiller les ressources système, déboguer des logiciels et détecter des malwares.</li><li><strong>Msfvenom</strong> : Msfvenom est un outil en ligne de commande utilisé pour créer, manipuler et produire des payloads.</li></ul><h3 id="visual-studio" tabindex="-1">Visual Studio <a class="header-anchor" href="#visual-studio" aria-label="Permalink to &quot;Visual Studio&quot;">​</a></h3><p>Visual Studio est un environnement de développement intégré (IDE) développé par Microsoft. Il est utilisé pour développer une large gamme de logiciels tels que des applications web, des services web et des programmes informatiques. Il comprend également des outils de développement et de débogage pour construire et tester des applications. Visual Studio sera le principal IDE utilisé pour le développement dans ce cours.</p><p><img src="'+d+'" alt="Visual Studio"></p><h3 id="x64dbg" tabindex="-1">x64dbg <a class="header-anchor" href="#x64dbg" aria-label="Permalink to &quot;x64dbg&quot;">​</a></h3><p>x64dbg est un utilitaire de débogage open-source pour les binaires Windows x64 et x86. Il est utilisé pour analyser et déboguer les applications en mode utilisateur et les pilotes en mode noyau. Il fournit une interface graphique qui permet aux utilisateurs d&#39;inspecter et d&#39;analyser l&#39;état de leurs programmes et de visualiser le contenu de la mémoire, les instructions d&#39;assemblage et les valeurs des registres. Avec x64dbg, les utilisateurs peuvent définir des points d&#39;arrêt, voir les données de la pile et du tas, parcourir le code pas à pas et lire et écrire des valeurs mémoire.</p><p><img src="'+p+'" alt="x64dbg"></p><h4 id="le-principal-onglet-cpu-comporte-4-ecrans" tabindex="-1">Le principal onglet &quot;CPU&quot; comporte 4 écrans : <a class="header-anchor" href="#le-principal-onglet-cpu-comporte-4-ecrans" aria-label="Permalink to &quot;Le principal onglet &quot;CPU&quot; comporte 4 écrans :&quot;">​</a></h4><ul><li><strong>Désassemblage (en haut à gauche)</strong> : Cette fenêtre affiche les instructions d&#39;assemblage exécutées par l&#39;application.</li><li><strong>Dump (en bas à gauche)</strong> : Cette fenêtre affiche le contenu mémoire de l&#39;application en cours de débogage.</li><li><strong>Registres (en haut à droite)</strong> : Cette fenêtre affiche les valeurs des registres du CPU.</li><li><strong>Pile (en bas à droite)</strong> : Cette fenêtre affiche le contenu de la pile.</li></ul><p>Les onglets restants fournissent également des informations utiles mais seront abordés dans les modules lorsqu&#39;ils seront utilisés.</p><h3 id="pe-bear" tabindex="-1">PE-Bear <a class="header-anchor" href="#pe-bear" aria-label="Permalink to &quot;PE-Bear&quot;">​</a></h3><p>PE-Bear est un outil gratuit et open-source conçu pour aider les analystes de malware et les ingénieurs en rétro-ingénierie à analyser rapidement et facilement les fichiers exécutables portables (PE) de Windows. Il aide à analyser et visualiser la structure du fichier PE, à visualiser les importations et exportations de chaque module, et à effectuer une analyse statique pour détecter les anomalies et les codes potentiellement malveillants. PE-Bear comprend également des fonctionnalités telles que la validation des en-têtes et des sections PE, ainsi qu&#39;un éditeur hexadécimal.</p><p><img src="'+c+'" alt="PE-Bear"></p><h3 id="process-hacker" tabindex="-1">Process Hacker <a class="header-anchor" href="#process-hacker" aria-label="Permalink to &quot;Process Hacker&quot;">​</a></h3><p>Process Hacker est un outil open-source pour visualiser et manipuler les processus et services sous Windows. Il est similaire au gestionnaire de tâches mais fournit plus d&#39;informations et de fonctionnalités avancées. Il peut être utilisé pour terminer des processus et des services, voir des informations et des statistiques détaillées sur les processus, définir des priorités de processus et plus encore. Process Hacker sera utile pour analyser les processus en cours afin de visualiser des éléments tels que les DLL chargées et les régions mémoire.</p><p><img src="'+m+'" alt="Process Hacker"></p><h3 id="msfvenom" tabindex="-1">Msfvenom <a class="header-anchor" href="#msfvenom" aria-label="Permalink to &quot;Msfvenom&quot;">​</a></h3><p>Msfvenom est un générateur de payload autonome du framework Metasploit qui permet aux utilisateurs de générer divers types de payloads. Ces payloads seront utilisés par le malware créé dans ce cours.</p><p><img src="'+g+'" alt="msfvenom"></p><div class="info custom-block"><p class="custom-block-title">Sources</p><p>Ce cours s&#39;inspire de connaissances personnelles et de recherches sur le Web.</p></div>',41))])}const k=r(v,[["render",h]]);export{y as __pageData,k as default};
