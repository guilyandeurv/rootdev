import{_ as t,D as n,c as l,I as a,l as s,a as e,a5 as r,o}from"./chunks/framework.D561hJ3q.js";const d="/assets/types.DHLrkp0J.png",x=JSON.parse('{"title":"Introduction à Python","description":"","frontmatter":{"sidebar":"auto"},"headers":[],"relativePath":"python/index.md","filePath":"python/index.md","lastUpdated":1712160647000}'),p={name:"python/index.md"},h=s("h1",{id:"introduction-a-python",tabindex:"-1"},[e("Introduction à Python "),s("a",{class:"header-anchor",href:"#introduction-a-python","aria-label":'Permalink to "Introduction à Python"'},"​")],-1),c=r(`<h2 id="hello-world" tabindex="-1">Hello World ! <a class="header-anchor" href="#hello-world" aria-label="Permalink to &quot;Hello World !&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World !&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>On peut contrôler ce qui est affiché à l&#39;écran en utilisant l&#39;instruction <code>print()</code>. Tout ce qui se trouve entre parenthèses <code>()</code> sera affiché. Cependant, comme on imprime une chaîne, on doit les mettre entre guillemets <code>&quot;&quot;</code>.</p><h2 id="operateurs-mathematiques" tabindex="-1">Opérateurs mathématiques <a class="header-anchor" href="#operateurs-mathematiques" aria-label="Permalink to &quot;Opérateurs mathématiques&quot;">​</a></h2><table><thead><tr><th>Opérateur</th><th>Syntaxe</th><th>Exemple</th></tr></thead><tbody><tr><td>Addition</td><td><code>+</code></td><td>1 + 1 = 2</td></tr><tr><td>Soustraction</td><td><code>-</code></td><td>2 - 1 = 1</td></tr><tr><td>Multiplication</td><td><code>*</code></td><td>2 * 2 = 4</td></tr><tr><td>Division</td><td><code>/</code></td><td>10 / 2 = 5</td></tr><tr><td>Modulo</td><td><code>%</code></td><td>10 % 2 = 0</td></tr><tr><td>Exposant</td><td><code>**</code></td><td>5 ** 2 = 25 (5²)</td></tr></tbody></table><h2 id="operateurs-de-comparaison" tabindex="-1">Opérateurs de comparaison <a class="header-anchor" href="#operateurs-de-comparaison" aria-label="Permalink to &quot;Opérateurs de comparaison&quot;">​</a></h2><table><thead><tr><th>Opérateur</th><th>Syntaxe</th></tr></thead><tbody><tr><td>Plus grand que</td><td><code>&gt;</code></td></tr><tr><td>Plus petit que</td><td><code>&lt;</code></td></tr><tr><td>Égal à</td><td><code>==</code></td></tr><tr><td>Différent de</td><td><code>!=</code></td></tr><tr><td>Plus grand ou égal à</td><td><code>&gt;=</code></td></tr><tr><td>Plus petit ou égal à</td><td><code>&lt;=</code></td></tr></tbody></table><h2 id="operateurs-booleens" tabindex="-1">Opérateurs booléens <a class="header-anchor" href="#operateurs-booleens" aria-label="Permalink to &quot;Opérateurs booléens&quot;">​</a></h2><table><thead><tr><th>Opérateur</th><th>Syntaxe</th></tr></thead><tbody><tr><td>Les deux conditions doivent être vraies pour que la déclaration soit vraie</td><td><code>AND</code></td></tr><tr><td>Une seule condition de la déclaration doit être vraie</td><td><code>OR</code></td></tr><tr><td>Si une condition est l&#39;opposé d&#39;un argument</td><td><code>NOT</code></td></tr></tbody></table><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><p>Les variables permettent de stocker et de mettre à jour des données dans un programme informatique. Il s&#39;agit d&#39;une valeur stockée sous un nom :</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Yamaha&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Ici nous avons <strong>délcaré</strong> la variable <code>marque</code> sous la valeur <code>&quot;Yamaha&quot;</code>, qui est une chaine de caractère (<em>string</em>), ainsi que la variabl <code>prix</code> sous la valeur <code>5000</code>, qui est un entier (<em>int</em>).</p><p>Les valeurs de celles-ci peuvent être modifiées à tout moment lors du programme, comme l&#39;exemple si dessous :</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prix)</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5005</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="types-de-donnees" tabindex="-1">Types de données <a class="header-anchor" href="#types-de-donnees" aria-label="Permalink to &quot;Types de données&quot;">​</a></h2><ol><li><em><strong>Chaîne de caractère</strong></em> (String) : utilisée pour les combinaisons de caractères, tels que des lettres ou des symboles.</li><li><em><strong>Entier</strong></em> (Integer) : Nombres entiers</li><li><em><strong>Float</strong></em> : Nombres contenant des points décimaux ou pour des fractions</li><li><em><strong>Booléen</strong></em> : Utilisé pour les données limitées aux options <code>Vrai</code> ou <code>Faux</code></li><li><em><strong>Liste</strong></em> : Série de différents types de données stockés dans une collection</li></ol><p><img src="`+d+`" alt="Exemples types"></p><h2 id="les-instructions" tabindex="-1">Les instructions <a class="header-anchor" href="#les-instructions" aria-label="Permalink to &quot;Les instructions&quot;">​</a></h2><p>L&#39;utilisation des instructions <code>if</code>, <code>elif</code> et <code>else</code> permettent aux programmes de prendre des décisions.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">portefeuille </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> portefeuille </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prix :</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vous n&#39;avez pas assez d&#39;argent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Vous avez assez d&#39;argent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Ici, <strong>si</strong> l&#39;argent dans mon <strong>portefeuille</strong> est <strong>inférieur</strong> au <strong>prix</strong>, alors que je ne peux pas acheter le produit. <strong>Sinon</strong>, je peux acheter le produit.</p><h2 id="les-boucles" tabindex="-1">Les boucles <a class="header-anchor" href="#les-boucles" aria-label="Permalink to &quot;Les boucles&quot;">​</a></h2><p>En programmation, les boucles permettent aux programmes d’itérer et d’effectuer des actions un certain nombre de fois. Il existe deux types de boucles : <code>for</code> et <code>while</code>.</p><h3 id="la-boucle-while" tabindex="-1">La boucle While <a class="header-anchor" href="#la-boucle-while" aria-label="Permalink to &quot;La boucle While&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Ici, <code>i</code> est égal à <strong>1</strong>. <em><strong>Tant que</strong></em> <code>i</code> n&#39;est pas égal à <strong>10</strong>, alors, <code>print</code> de <code>i</code> et <code>i + 1</code>.</p><h3 id="la-boucle-for" tabindex="-1">La boucle For <a class="header-anchor" href="#la-boucle-for" aria-label="Permalink to &quot;La boucle For&quot;">​</a></h3><p>Une boucle for est utilisée pour itérer sur une séquence telle qu’une liste.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">siteweb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rootdev.fr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tryhackme.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;udemy.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> site </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> siteweb:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(site)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Ici, <code>siteweb</code> est une liste comprenant les valeurs <em>rootdev.fr</em>, <em>tryhackme.fr</em> et <em>udemy.com</em>. <em><strong>Pour chaque</strong></em> élément <em>(site)</em>, <code>print</code> l&#39;élement.</p><p>En Python, on peut également itérer sur une plage de nombres à l’aide de la fonction <code>range</code>. Ci-dessous un exemple de code Python qui affichera les nombres de 0 à 4. En programmation, 0 est souvent le nombre de départ.</p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><br>`,35),k={class:"info custom-block"},u=s("p",{class:"custom-block-title"},"Sources",-1),g=s("p",null,[e(`Ce cours s'inspire (et utilise les images) de TryHackMe.com de la chambre "`),s("em",null,"Python basics"),e('" :')],-1),m=s("a",{href:"https://tryhackme.com/r/room/pythonbasics",target:"_blank",rel:"noreferrer"},"https://tryhackme.com/r/room/pythonbasics",-1);function b(E,y,F,v,C,q){const i=n("Badge");return o(),l("div",null,[h,a(i,{type:"tip",text:"Rédigé le 02/04/2024"}),a(i,{type:"warning",text:"En cours de rédaction"}),c,s("div",k,[u,g,s("p",null,[m,e(),a(i,{type:"tip",text:"Gratuit"})])])])}const _=t(p,[["render",b]]);export{x as __pageData,_ as default};
