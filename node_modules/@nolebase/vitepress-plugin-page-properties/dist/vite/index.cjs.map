{"version":3,"file":"index.cjs","sources":["../../src/vite/path.ts","../../src/vite/markdownSection.ts","../../src/vite/pageProperties/dynamic/readingTime.ts","../../src/vite/pageProperties/index.ts"],"sourcesContent":["import { normalizePath } from 'vite'\n\nexport function pathEquals(path: string, equals: string): boolean {\n  return normalizePath(path) === (normalizePath(equals))\n}\n\nexport function pathStartsWith(path: string, startsWith: string): boolean {\n  return normalizePath(path).startsWith(normalizePath(startsWith))\n}\n\nexport function pathEndsWith(path: string, startsWith: string): boolean {\n  return normalizePath(path).endsWith(normalizePath(startsWith))\n}\n","import type { Plugin } from 'vite'\nimport { relative } from 'node:path'\nimport { env } from 'node:process'\nimport GrayMatter from 'gray-matter'\nimport {\n  pathEndsWith,\n  pathEquals,\n  pathStartsWith,\n} from './path'\n\nexport interface Context {\n  helpers: {\n    /**\n     * A helper function to help to determine whether the passed string parameter equals the\n     * current transforming module ID with normalization of paths capabilities and\n     * cross platform / OS compatibilities.\n     *\n     * @param equalsWith - String to equal with\n     * @returns boolean\n     */\n    idEquals: (equalsWith: string) => boolean\n    /**\n     * A helper function to help to determine whether the passed string parameter startsWith the\n     * current transforming module ID with normalization of paths capabilities and\n     * cross platform / OS compatibilities.\n     *\n     * @param startsWith - String to start with\n     * @returns boolean\n     */\n    idStartsWith: (startsWith: string) => boolean\n    /**\n     * A helper function to help to determine whether the passed string parameter endsWith the\n     * current transforming module ID with normalization of paths capabilities and\n     * cross platform / OS compatibilities.\n     *\n     * @param endsWith - String to end with\n     * @returns boolean\n     */\n    idEndsWith: (endsWith: string) => boolean\n    /**\n     * A helper function to help to determine whether the passed first path parameter\n     * equals the second passed string with normalization of paths capabilities and\n     * cross platform / OS compatibilities.\n     *\n     * @param path - Path to be compared with\n     * @param equalsWith - String to equal with\n     * @returns boolean\n     */\n    pathEquals: (path: string, equalsWith: string) => boolean\n    /**\n     * A helper function to help to determine whether the passed first path parameter\n     * startsWith the second passed string with normalization of paths capabilities and\n     * cross platform / OS compatibilities.\n     *\n     * @param path - Path to be compared with\n     * @param startsWith - String to start with\n     * @returns boolean\n     */\n    pathStartsWith: (path: string, startsWith: string) => boolean\n    /**\n     * A helper function to help to determine whether the passed first path parameter\n     * endsWith the second passed string with normalization of paths capabilities and\n     * cross platform / OS compatibilities.\n     *\n     * @param path - Path to be compared with\n     * @param endsWith - String to end with\n     * @returns boolean\n     */\n    pathEndsWith: (path: string, endsWith: string) => boolean\n  }\n}\n\nexport interface PagePropertiesMarkdownSectionOptions {\n  /**\n   * The list of file names to exclude from the transformation\n   *\n   * @default ['index.md']\n   */\n  excludes?: string[]\n  /**\n   * The function to exclude the file from the transformation\n   *\n   * @param id - the current transforming module ID (comes from vite when transform hook is called)\n   * @param context - the context object, contains several helper functions\n   * @returns boolean\n   * @default () => false\n   */\n  exclude?: (id: string, context: Context) => boolean\n}\n\nexport function PagePropertiesMarkdownSection(options?: PagePropertiesMarkdownSectionOptions): Plugin {\n  const {\n    excludes = ['index.md'],\n    exclude = () => false,\n  } = options ?? {}\n\n  let root = ''\n\n  return {\n    name: '@nolebase/vitepress-plugin-page-properties-markdown-section',\n    // May set to 'pre' since end user may use vitepress wrapped vite plugin to\n    // specify the plugins, which may cause this plugin to be executed after\n    // vitepress or the other markdown processing plugins.\n    enforce: 'pre',\n    configResolved(config) {\n      root = config.root ?? ''\n    },\n    transform(code, id) {\n      function idEndsWith(endsWith: string) {\n        return pathEndsWith(relative(root, id), endsWith)\n      }\n\n      function idEquals(equals: string) {\n        return pathEquals(relative(root, id), equals)\n      }\n\n      function idStartsWith(startsWith: string) {\n        return pathStartsWith(relative(root, id), startsWith)\n      }\n\n      const context: Context = {\n        helpers: {\n          pathEndsWith,\n          pathEquals,\n          pathStartsWith,\n          idEndsWith,\n          idEquals,\n          idStartsWith,\n        },\n      }\n\n      if (!id.endsWith('.md'))\n        return null\n      if (excludes.includes(relative(root, id)))\n        return null\n      if (exclude(id, context))\n        return null\n\n      const targetComponent = env.NODE_ENV === 'development'\n        ? TemplatePagePropertiesEditor()\n        : TemplatePageProperties()\n\n      const parsedMarkdownContent = GrayMatter(code)\n\n      if ('nolebase' in parsedMarkdownContent.data && 'pageProperties' in parsedMarkdownContent.data.nolebase && !parsedMarkdownContent.data.nolebase.pageProperties)\n        return null\n      if ('pageProperties' in parsedMarkdownContent.data && !parsedMarkdownContent.data.pageProperties)\n        return null\n\n      const hasFrontmatter = Object.keys(parsedMarkdownContent.data).length > 0\n\n      // match any heading and move heading to top, then insert component after heading\n      const headingMatch = parsedMarkdownContent.content.match(/^# .*/m)\n      if (!headingMatch || !headingMatch[0] || headingMatch.index === undefined) {\n        if (!hasFrontmatter)\n          return `${targetComponent}\\n\\n${code}`\n\n        return `${GrayMatter.stringify(`${targetComponent}\\n\\n${parsedMarkdownContent.content}`, parsedMarkdownContent.data)}`\n      }\n\n      const headingPart = parsedMarkdownContent.content.slice(0, headingMatch.index + headingMatch[0].length)\n      const contentPart = parsedMarkdownContent.content.slice(headingMatch.index + headingMatch[0].length)\n\n      if (!hasFrontmatter)\n        return `${headingPart}\\n${targetComponent}\\n\\n${contentPart}`\n\n      return `${GrayMatter.stringify(`${headingPart}\\n${targetComponent}\\n\\n${contentPart}`, parsedMarkdownContent.data)}`\n    },\n  }\n}\n\nfunction TemplatePagePropertiesEditor(): string {\n  return `\n\n<NolebasePagePropertiesEditor />\n`\n}\n\nfunction TemplatePageProperties(): string {\n  return `\n\n<NolebasePageProperties />\n\n`\n}\n","// Great thanks to the following authors for the excellent reading time calculation code implementation\n//\n// Repository: vuepress-theme-hope\n// By: Mister-Hope <https://github.com/Mister-Hope>\n// Source code at: vuepress-theme-hope/packages/reading-time2/src/node/readingTime.ts <https://github.com/vuepress-theme-hope/vuepress-theme-hope/blob/main/packages/reading-time2/src/node/readingTime.ts>\n//\n// Repository: vuepress-theme-gungnir\n// By: Renovamen <https://github.com/Renovamen>\n// Source code at: vuepress-theme-gungnir/packages/plugins/reading-time/reading-time.js <https://github.com/Renovamen/vuepress-theme-gungnir/blob/v0/packages/plugins/reading-time/reading-time.js>\n//\n// Heavily inspired by the above two repositories, the following code is a combination of the two with some modifications and improvements.\n\n// Types for different language handlers and reading time calculation\nexport interface LanguageHandler {\n  regex: RegExp\n  wordsPerMinute: number\n}\n\nexport interface ReadingTimeStats {\n  readingTime: number\n  wordsCount: number\n}\n\n// Default language handlers for Chinese and Latin/Cyrillic based languages\nconst languageHandlers: Record<string, LanguageHandler> = {\n  japanese: {\n    regex: /\\p{Script=Hiragana}|\\p{Script=Katakana}/gu, // Match Japanese characters\n    wordsPerMinute: 400, // Hypothetical average reading speed for Japanese\n  },\n  chinese: {\n    regex: /\\p{Script=Han}/gu, // Match Chinese characters\n    wordsPerMinute: 300, // Average reading speed for Chinese\n  },\n  latinCyrillic: {\n    regex: /[\\p{Script=Latin}\\p{Script=Cyrillic}\\p{Mark}\\p{Punctuation}\\p{Number}]+/gu, // Match Latin and Cyrillic characters\n    wordsPerMinute: 160, // Average reading speed for English and similar languages\n  },\n}\n\n// Function to count words in a text based on the provided language handlers\nfunction countWordsByLanguage(content: string): Record<string, number> {\n  return Object.keys(languageHandlers).reduce((accumulator, language) => {\n    const match = content.match(languageHandlers[language].regex)\n    accumulator[language] = match ? match.length : 0\n\n    return accumulator\n  }, {})\n}\n\n// Function to calculate reading time across multiple languages\nexport function calculateWordsCountAndReadingTime(content: string): ReadingTimeStats {\n  const wordsCounts = countWordsByLanguage(content)\n\n  const totalWords = Object.values(wordsCounts).reduce((sum, count) => sum + count, 0)\n  const totalMinutes = Object.entries(wordsCounts).reduce((sum, [language, count]) => {\n    return sum + (count / languageHandlers[language].wordsPerMinute)\n  }, 0)\n\n  return {\n    readingTime: Math.ceil(totalMinutes),\n    wordsCount: totalWords,\n  }\n}\n","import type { Plugin, ResolvedConfig } from 'vite'\nimport type { SiteConfig } from 'vitepress'\nimport type { LanguageHandler, ReadingTimeStats } from './dynamic/readingTime'\nimport type { PagePropertiesData } from './types'\nimport {\n  existsSync,\n  lstatSync,\n  readFileSync,\n} from 'node:fs'\nimport { extname, relative } from 'node:path'\nimport GrayMatter from 'gray-matter'\nimport { normalizePath } from 'vite'\nimport { calculateWordsCountAndReadingTime } from './dynamic/readingTime'\n\nconst VirtualModuleID = 'virtual:nolebase-page-properties'\nconst ResolvedVirtualModuleId = `\\0${VirtualModuleID}`\n\nexport type {\n  LanguageHandler,\n  ReadingTimeStats as ReadingTimeResult,\n}\n\ninterface VitePressConfig extends ResolvedConfig {\n  vitepress: SiteConfig\n}\n\nfunction normalizeWithRelative(from: string, path: string) {\n  return normalizePath(relative(from, path)).toLowerCase()\n}\n\nexport function PageProperties(): Plugin {\n  let _config: VitePressConfig\n  let srcDir = ''\n  const calculatedPagePropertiesActualData: PagePropertiesData = {}\n  const knownMarkdownFiles = new Set<string>()\n\n  return {\n    name: '@nolebase/vitepress-plugin-page-properties',\n    // May set to 'pre' since end user may use vitepress wrapped vite plugin to\n    // specify the plugins, which may cause this plugin to be executed after\n    // vitepress or the other markdown processing plugins.\n    enforce: 'pre',\n    config: () => ({\n      optimizeDeps: {\n        exclude: [\n          '@nolebase/vitepress-plugin-page-properties/client',\n        ],\n      },\n      ssr: {\n        noExternal: [\n          '@nolebase/vitepress-plugin-page-properties',\n        ],\n      },\n    }),\n    configResolved(config) {\n      _config = config as VitePressConfig\n      srcDir = _config.vitepress.srcDir\n    },\n    resolveId(id) {\n      if (id === VirtualModuleID)\n        return ResolvedVirtualModuleId\n    },\n    load(id) {\n      if (id !== ResolvedVirtualModuleId)\n        return null\n\n      return `export default ${JSON.stringify(calculatedPagePropertiesActualData)}`\n    },\n    transform(code, id) {\n      if (!id.endsWith('.md'))\n        return null\n\n      const parsedContent = GrayMatter(code)\n      calculatedPagePropertiesActualData[normalizeWithRelative(srcDir, id)] = calculateWordsCountAndReadingTime(parsedContent.content)\n    },\n    configureServer(server) {\n      server.hot.on('nolebase-page-properties:client-mounted', async (data) => {\n        if (!data || typeof data !== 'object')\n          return\n        if (!('page' in data && 'filePath' in data.page))\n          return\n\n        const toMarkdownFilePath = data.page.filePath\n        if (extname(data.page.filePath) !== '.md')\n          return\n\n        if (!knownMarkdownFiles.has(toMarkdownFilePath.toLowerCase())) {\n          try {\n            const exists = await existsSync(toMarkdownFilePath)\n            if (!exists)\n              return\n\n            const stat = await lstatSync(toMarkdownFilePath)\n            if (!stat.isFile())\n              return\n\n            knownMarkdownFiles.add(toMarkdownFilePath.toLowerCase())\n          }\n          catch {\n            return\n          }\n        }\n        if (!knownMarkdownFiles.has(toMarkdownFilePath.toLowerCase()))\n          return\n\n        const content = await readFileSync(toMarkdownFilePath, 'utf-8')\n        const parsedContent = GrayMatter(content)\n        calculatedPagePropertiesActualData[toMarkdownFilePath] = calculateWordsCountAndReadingTime(parsedContent.content)\n\n        const virtualModule = server.moduleGraph.getModuleById(ResolvedVirtualModuleId)\n        if (!virtualModule)\n          return\n\n        server.moduleGraph.invalidateModule(virtualModule)\n        server.hot.send({\n          type: 'custom',\n          event: 'nolebase-page-properties:updated',\n          data: calculatedPagePropertiesActualData,\n        })\n      })\n    },\n  }\n}\n"],"names":["normalizePath","relative","env","GrayMatter","extname","existsSync","lstatSync","readFileSync"],"mappings":"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"}